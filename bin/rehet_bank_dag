#! /usr/bin/env python

import os
import sys
import datetime
import argparse


"""

"""

###############################################################################
# PARSE ARGUMENTS
parser = argparse.ArgumentParser()
parser.add_argument("-d", "--detectors", nargs='+', default=["H1", "L1"])
parser.add_argument("-r", "--runs", nargs='+', default=["S5", "S6"])
parser.add_argument("-p", "--pulsars", nargs='+', default=None)
parser.add_argument("--ninst", default=100, type=int,
                    help="Number of instantiations to produce.")
parser.add_argument("--polHTC", default=None, help="path to polHTC.")
parser.add_argument("--base-dir", default=os.getcwd(), help="Base directory")
parser.add_argument("-v", "--verbose", action="store_true")

args = parser.parse_args()
detectors = args.detectors
runs = args.runs
ninst = args.ninst
basedir = os.path.join(os.path.abspath(args.base_dir), "cw_rehet_bank/")
verbose = args.verbose

if args.polHTC:
    sys.path.append(args.polHTC)
from polHTC import general as g

###############################################################################
# CONSTANTS
FREQ_RANGE = [1.0e-7, 0.85e-3]

###############################################################################
# DIRECTORY STRUCTURE AND PATHS

subpath = os.path.join(basedir, "htc/", "rehetbank.sub")

dagpath = os.path.join(basedir, "htc/", "rehetbank.dag")

dagconfig = os.path.join(basedir, "htc/", "dagman.config")

exepath = os.path.join(os.path.dirname(__file__), "create_dataset")

logsdir = os.path.join(basedir, "htc/", "logs/")

polHTCpath = os.path.abspath(os.path.dirname(os.path.dirname(g.__file__)))

try:
    os.makedirs(basedir)
except OSError:
    print "WARNING: base directory already exists " \
          "and data might be overwritten."

try:
    os.makedirs(logsdir)
except OSError:
    pass

for run in runs:
    for det in detectors:
        dirname = os.path.join(basedir, run, det)
        try:
            os.makedirs(dirname)
            if verbose:
                print "Created directory %s." % dirname
        except OSError:
            if verbose:
                print "Directory %s already exists." % dirname

readme_lines = [
    "GW DETECTOR RE-HETERODYNED NOISE BANK",
    "\nFrequency range: %r" % FREQ_RANGE,
    "Number of instantiations: %i" % ninst,
    "\nCreated: %s" % datetime.date.today()
]

with open(os.path.join(basedir, "README.txt"), 'w') as f:
    for line in readme_lines:
        f.write("%s\n" % line)

###############################################################################
# WRITE SUBMIT

subfile_lines = [
    'Universe = Vanilla',
    'Executable = %s' % exepath,
    'initialdir = %s' % basedir,
    'arguments = "$(output_path) -p $(psr) -d $(det) -r $(run) --gzip --no-overwrite '
    '--ninst $(ninst) --fid -1 --polHTC %s --real-noise"' % polHTCpath,
    'Output = %srehetbank_$(psr)_$(det)_$(run).out' % logsdir,
    'Error = %srehetbank_$(psr)_$(det)_$(run).err' % logsdir,
    'Log = %srehetbank_$(psr)_$(det)_$(run).log' % logsdir,
    'getenv = true',
    'Queue'
]

with open(subpath, 'w') as f:
    for l in subfile_lines:
        f.write('%s\n' % l)


###############################################################################
# WRITE DAG

with open(dagpath, 'w') as f:
    # Point to configuration file with DAGman variables:
    f.write('CONFIG %s\n\n' % dagconfig)

    for run in runs:
        for det in detectors:
            if args.pulsars is None:
                # analyze all pulsars in list
                psrlist = g.read_psrlist(det=det, run=run)
                # load PSR exclusion list (if it exists):
                badpsrs = g.read_psrlist(run=run, name='bad')
                pulsars = list(set(psrlist) - set(badpsrs))
            else:
                pulsars = args.pulsars

            for psr in pulsars:
                    jobname = "%s_%s_%s" % (psr, run, det)
                    output_dir = os.path.join(basedir, run, det, psr)
                    try:
                        os.mkdir(output_dir)
                    except OSError:
                        pass
                    filename = "rehet_%s_%s" % (psr, det)
                    output_path = os.path.join(output_dir, filename)

                    txt_lines = [
                        '# %s %s %s' % (run, det, psr),
                        'JOB %s %s' % (jobname, subpath),
                        'VARS %s psr="%s"' % (jobname, psr),
                        'VARS %s det="%s"' % (jobname, det),
                        'VARS %s run="%s"' % (jobname, run),
                        'VARS %s ninst="%i"' % (jobname, ninst),
                        'VARS %s output_path="%s"' % (jobname, output_path),
                        'RETRY %s 2' % jobname,  # retry job 2 times
                        '\n'
                    ]

                    for l in txt_lines:
                        f.write('%s\n' % l)


# Configure Dagman to not limit the number of times a node is put on hold
with open(dagconfig, 'w') as f:
    f.write('DAGMAN_MAX_JOB_HOLDS = 0')

print "DAG written. Submit using:"
print "condor_submit_dag %s" % dagpath
