#! /usr/bin/env python

import os
import sys
import glob
import argparse
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

default_output = os.path.join(os.getcwd(), "logbf_hist.pdf")

parser = argparse.ArgumentParser()
parser.add_argument("directories", nargs='+')
parser.add_argument("-d", "--output", default=default_output)
parser.add_argument("-m", "--models", nargs='+', default=['g4v', 'gr'])
parser.add_argument("--extension", default="_B.txt")
parser.add_argument("--nbins", default=100, type=int)
parser.add_argument("--separate", action="store_true")
parser.add_argument("--log-scale", action="store_true")
parser.add_argument("--normed", action="store_true")
parser.add_argument("--labels", nargs='+', default=None)

args = parser.parse_args()
outdirs = args.directories
b_ext = args.extension
fig_name, fig_ext = os.path.splitext(args.output)
models = args.models
if len(models) > 2:
    print "Error: cannot compare more than 2 models."
    sys.exit(1)
labels = args.labels
if labels is None and len(models) == 2:
    labels = ["%i" % d for d in range(len(outdirs))]

bayes_factors = []

# LOAD DATA
if len(models) == 2 and isinstance(models, list):
    print "Comparing %s to %s." % (models[0], models[1])
    xlabel = "$log(B^%s_%s)$" % (models[0], models[1])
    # array to contain list of relative log Bayes factors
    logB_m0_m1 = []
    for outdir in outdirs:
        # list of rlB's for a given directory
        logB_m0_m1_single = []
        logB = {}
        for m in models:
            logB[m] = []
            b_file = os.path.join(outdir, "out_%s_*%s" % (m, b_ext))
            # loop over all Bayes factor files output from lalapps_ppen
            for bf in glob.glob(b_file):
                logB[m].append(np.loadtxt(bf)[0])
        # take difference between models for each instantiation
        for (lb0, lb1) in zip(logB[models[0]], logB[models[1]]):
            logB_m0_m1_single.append(lb0 - lb1)
        # add list of differnces to main array
        logB_m0_m1.append(logB_m0_m1_single)

elif len(models) == 1 or isinstance(models, basestring):
    if isinstance(models, basestring):
        m = models
    else:
        m = models[0]
    print "Comparing %s to noise-only model." % m
    xlabel = r"$log(B^{%s}_n)$" % m
    logB_m0_m1 = []
    for outdir in outdirs:
        b_file = os.path.join(outdir, "out_%s_*%s" % (m, b_ext))
        # loop over all Bayes factor files output from lalapps_ppen
        logB = []
        for bf in glob.glob(b_file):
            logB.append(np.loadtxt(bf)[0])
        logB_m0_m1.append(logB)
else:
    print "Error: invalid models: %r" % models
    sys.exit(1)

# PLOT
plt.figure()
for n in range(len(logB_m0_m1)):
    if args.separate:
        plt.figure()

    if isinstance(labels, list):
        label = labels[n]
    else:
        label = labels
    plt.hist(logB_m0_m1[n], args.nbins, log=args.log_scale, histtype='step',
             normed=args.normed, label=label)

    if args.separate:
        plt.xlabel(xlabel)
        if args.normed:
            plt.ylabel("Normed count")
        else:
            plt.ylabel("Count")
        fig_file = os.path.join(fig_name,"_%i%s" % (n, fig_ext))
        plt.savefig(fig_file, bbox_inches='tight')
        plt.close()

if not args.separate:
    plt.xlabel(xlabel)
    if args.normed:
        plt.ylabel("Normed count")
    else:
        plt.ylabel("Count")
    plt.savefig(args.output, bbox_inches='tight')

plt.close()
