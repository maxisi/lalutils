#! /usr/bin/env python

import sys
import os
import numpy as np
import argparse
import random

# PARSE ARGUMENTS
parser = argparse.ArgumentParser()
parser.add_argument("output_path")
parser.add_argument("-d", "--det", default='H1', help="Single IFO name.")
parser.add_argument("-r", "--run", default='S5', help="Run (S5, S6)")
parser.add_argument("-i", "--inject", default=None, help="Injection kind.")
parser.add_argument("--h0", default=1e-24, type=float)
parser.add_argument("-p", "--psr", default="J0534+2200", help="PSR J code.")
parser.add_argument("--real-noise", action="store_true",
                    help="Whether to use actual detector noise.")
parser.add_argument("--start-time", default=630720013.0, type=float,
                    help="GPS start time.")
parser.add_argument("--days", default=1, type=int, help="Length of series in "
                                                        "days")
parser.add_argument("--end-time", default=0, type=float, help="GPS end time")
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("-f", "--frequency", default=0.85e-3, type=float,
                    help="Specific frequency for reheterodyne")
parser.add_argument("--fid", default=None, type=int,
                    help="Index of element in standard [1.0e-7, 0.85e-3]"
                         " frequency array to be used for heterodyne. "
                         "IMPORTANT: if negative, loops over all frequencies.")
parser.add_argument("--ninst", default=1e4, type=int,
                    help="Number of instantiations to produce.")
parser.add_argument("--actual-time", action="store_true",
                    help="Use time vector from actual data series (relevant"
                         " when generating Gaussian noise.")
parser.add_argument("--polHTC", default=None, type=str, help="polHTC root dir")
parser.add_argument("--real-std", action="store_true")
parser.add_argument("--gzip", action="store_true")
parser.add_argument("--no-overwrite", action="store_true")

args = parser.parse_args()
verbose = args.verbose
run = args.run
detname = args.det
psrname = args.psr
injtmp = args.inject

filename, extension = os.path.splitext(args.output_path)

FREQ_RANGE = [1.0e-7, 0.85e-3]
PHI0 = 0

if args.polHTC:
        sys.path.append(args.polHTC)
from polHTC import general as g

if args.real_noise or injtmp or args.actual_time or args.real_std \
        or (args.fid < 0 and args.fid is not None):
    pair = g.Pair(psrname, detname)
    pair.load_finehet(run, p=os.path.join(args.polHTC, "data"))

if args.real_std:
    noisestd = np.std(pair.data)
else:
    noisestd = 1e-23

# If the fid option is passed, the reheterodyne frequency will be the fid-th
# entry in the following standard vector (same as used in polMethods searches)
if args.fid is not None:
    FREQ_ARRAY = np.linspace(FREQ_RANGE[0], FREQ_RANGE[1], args.ninst)

    if args.fid > (args.ninst - 1):
        print "Error: frequency index (%i) exceeds number " \
              "of frequencies (%i)." % (args.fid, args.ninst - 1)
        sys.exit(1)
    elif args.fid < 0:
        # since this case is so different, handle it separetly here
        for fix in range(args.ninst):
            fname = args.output_path + "_%i%s" % (fix, extension)
            if args.no_overwrite and os.path.isfile(fname):
              print "File exists: nothing to do."
              sys.exit(0)

            if args.real_noise:
                print "WARNING: will create %i instantiations of detector" \
                  " noise." % args.ninst
                # reheterodyne
                data = g.het(FREQ_ARRAY[fix], pair.data, pair.time)
                time = pair.time
            else:
                print "WARNING: will create %i instantiations of Gaussian" \
                      " noise." % args.ninst
                random.seed(2)
                time = pair.time
                data = np.array([random.gauss(0., noisestd) for n in
                                 range(len(pair.data))])
            # save
            if args.gzip:
                fname += '.gz'
            np.savetxt(fname, zip(time, data.real, data.imag),
                       ("%.6f", "%e", "%e"), delimiter="\t")
            if verbose:
                print "ASCII data %i/%i saved: %s" %\
                      (fix, args.ninst, fname)
        sys.exit(0)
    else:
        rehetfreq = FREQ_ARRAY[args.fid]
else:
    rehetfreq = args.frequency

if verbose and args.real_noise:
    print "Reheterodyne frequency: %.2e" % rehetfreq


# produce data
if args.real_noise:
    if verbose:
        print "Using actual %s %s noise for PSR %s." % (run, detname, psrname)
    data = g.het(rehetfreq, pair.data, pair.time)
    time = pair.time
    description_noise = "Actual"
else:
    # create time vector
    t0 = args.start_time
    tf = args.end_time
    if tf:
        # use provided final time
        if not tf > t0:
            print 'Error: end time must be after start time.'
            sys.exit(1)
        elif verbose:
            print "Time vector: (%.f, %.f)" % (t0, tf)
        time = np.arange(t0, tf, 60)
    elif args.actual_time:
        # use actual time vector
        time = pair.time
    else:
        # use number of days requested
        time = np.arange(t0, t0 + args.days * g.SS, 60)
        if verbose:
            print "Time vector: %.1f days starting at GPS %.f." % (args.days,
                                                                   t0)

    if verbose:
        print "Generating Gaussian noise of std %.1e." % noisestd
    data = np.array([random.gauss(0., noisestd) for n in range(len(time))]) +\
           1j*np.array([random.gauss(0., noisestd) for n in range(len(time))])
    description_noise = "Gaussian"


# inject
if injtmp:
    if verbose:
        print "Injecting %s with h0 = %.1e" % (injtmp, args.h0)
    pair.det.load_vectors(time, filename=psrname)
    inc = pair.psr.param['INC']
    pol = pair.psr.param['POL']
    data += args.h0 * pair.signal(injtmp, pol, inc, PHI0)
    # find effective injection strength
    h = [args.h0 * ap(inc, PHI0) for _, ap in
         pair.Signal.templates[injtmp].iteritems()]
    hinj = np.linalg.norm(h)
    description_inj = "%s (h = %.1e)" % (injtmp, hinj)
else:
    description_inj = "no"

np.savetxt(args.output_path, zip(time, data.real, data.imag),
           ("%.6f", "%e", "%e"), delimiter="\t")

print "ASCII data saved: %s" % args.output_path
